{
  "version": 3,
  "sources": ["../../js/components/shared/NotFound.tsx", "../../js/modules/link/link/ChannelSettings.tsx", "../../js/modules/link/link/ChatSettings.tsx"],
  "sourcesContent": ["import { CButton } from \"@conclude/components/concludeui\"\nimport globals from \"@conclude/core/Globals\"\nimport { useNavigate } from \"@conclude/hooks\"\nimport { makeStyles } from \"@fluentui/react-components\"\nimport React from \"react\"\n\nconst useStyles = makeStyles({\n    box: {\n        marginTop: \"30px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        rowGap: \"16px\",\n        justifyContent: \"center\",\n    },\n    center: {\n        textAlign: \"center\",\n    },\n})\n\nexport const NotFound = () => {\n    const styles = useStyles()\n    const navigate = useNavigate()\n\n    const onClick = () => {\n        void navigate({ to: globals.landingPage() })\n    }\n\n    return (\n        <div className={styles.box}>\n            <h3 className={styles.center}>Sorry, this page was not found</h3>\n            <div className={styles.center}>\n                <CButton appearance=\"primary\" onClick={onClick}>\n                    Bring me back!\n                </CButton>\n            </div>\n        </div>\n    )\n}\n", "import { CButton } from \"@conclude/components/concludeui\"\nimport { CLink } from \"@conclude/components/concludeui/CLink\"\nimport { HBox, Spacer, VBox } from \"@conclude/components/shared/BoxLayout\"\nimport { ButtonRow } from \"@conclude/components/shared/ButtonRow\"\nimport { ChannelSelect } from \"@conclude/components/shared/ChannelSelect\"\nimport { ConfirmationDialog } from \"@conclude/components/shared/ConfirmationDialog\"\nimport { Dialog, DialogProps } from \"@conclude/components/shared/Dialog\"\nimport { Icon } from \"@conclude/components/shared/Icon\"\nimport { LanguageSelect } from \"@conclude/components/shared/LanguageSelect\"\nimport { LoadingSpinner } from \"@conclude/components/shared/LoadingSpinner\"\nimport { TabContent } from \"@conclude/components/shared/TabContent\"\nimport { TeamSelect } from \"@conclude/components/shared/TeamSelect\"\nimport { toast } from \"@conclude/components/shared/Toast\"\nimport { default as Api, default as api } from \"@conclude/core/Api\"\nimport { channelIcon } from \"@conclude/core/Channel\"\nimport globals from \"@conclude/core/Globals\"\nimport { Protocol } from \"@conclude/core/Protocol\"\nimport Team from \"@conclude/core/Team\"\nimport { useLoaderData } from \"@conclude/hooks\"\nimport { theme } from \"@conclude/theme\"\nimport {\n    makeStyles,\n    Table,\n    TableBody,\n    TableCell,\n    TableHeader,\n    TableHeaderCell,\n    TableRow,\n} from \"@fluentui/react-components\"\nimport React, { useState } from \"react\"\n\nconst useStyles = makeStyles({\n    header: {\n        fontWeight: \"700\",\n    },\n    icon: {\n        color: theme.colors.grayMedium,\n        cursor: \"pointer\",\n        \":hover\": {\n            color: theme.colors.gray,\n        },\n    },\n    syncDirection: {\n        display: \"flex\",\n        color: theme.colors.green,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        textAlign: \"center\",\n        userSelect: \"none\",\n    },\n    pointer: {\n        cursor: \"pointer\",\n    },\n    team: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        columnGap: \"10px\",\n        alignItems: \"center\",\n        padding: \"10px 0\",\n    },\n    teamName: {\n        flexGrow: 1,\n    },\n    lanCode: {\n        marginLeft: \"10px\",\n        textTransform: \"uppercase\",\n    },\n    noLinks: {\n        textAlign: \"center\",\n        fontSize: \"1.3rem\",\n        lineHeight: \"1.5\",\n    },\n    green: {\n        color: theme.colors.green,\n    },\n    centerBox: {\n        padding: \"5%\",\n        textAlign: \"center\",\n    },\n    noMargin: {\n        margin: 0,\n    },\n    subHeader: {\n        color: theme.colors.green,\n    },\n    noBorder: {\n        border: \"none\",\n    },\n})\n\ntype Link = Protocol.Link\n\nexport const OrgLinksLoader = async () => {\n    const org = globals.organization()\n    if (org) {\n        const orgLinks = await api.listLinks(org.id)\n        return { orgLinks }\n    }\n    return {}\n}\n\ntype DirectionIconProps = {\n    item: Link\n}\n\nconst DirectionIcon = (props: DirectionIconProps) => {\n    void props\n    const styles = useStyles()\n    const arrow = <Icon icon=\"sidebar-link\" size={28} color={theme.colors.greenLight} />\n\n    return <div className={styles.syncDirection}>{arrow}</div>\n}\n\ntype LinkedChannelProps = {\n    teamID: string\n    channelID: string\n    name?: string\n    url?: string\n}\n\nexport const RenderLinkedChannel = (props: LinkedChannelProps) => {\n    const name = props.name ?? \"hidden\"\n    let url = props.url ?? \"\"\n    let target = undefined\n    if (globals.insideMSTeams()) {\n        if (url.includes(\"slack://\")) {\n            const team = globals.getTeamForID(props.teamID)\n            const i = url.indexOf(\"&id=\")\n            if (team && i > 0) {\n                // The string after the &id= is the Slack channel ID\n                url = team.url() + \"/app_redirect?channel=\" + url.substring(i + 4)\n            } else {\n                url = \"\"\n            }\n            target = \"_blank\"\n        }\n    } else if (url.includes(\"https://\")) {\n        target = \"_blank\"\n    }\n\n    return (\n        <div>\n            <a href={url} target={target}>\n                <HBox centerItems>\n                    <Icon icon={channelIcon(url)} size={14} />\n                    <Spacer size={4} />\n                    {name}\n                </HBox>\n            </a>\n        </div>\n    )\n}\n\ntype TeamProps = {\n    teamID: string\n    name?: string\n    channelUrl?: string\n}\n\nexport const RenderTeam = (props: TeamProps) => {\n    const teamRef = globals.teamList.find((t) => t.id === props.teamID)\n    // teamRef is null if the user does not have access to the team\n    const team = new Team(teamRef)\n    const styles = useStyles()\n    const name = props.name ?? team.name()\n    let icon = team.platformIcon()\n    if (!icon && props.channelUrl) {\n        // Get the icon from the channel URL if the team is unknown, in the\n        // case where the user does not have access to the team\n        icon = channelIcon(props.channelUrl)\n    }\n\n    return (\n        <div className={styles.team}>\n            <Icon icon={icon} size={16} />\n            <div className={styles.teamName}>{name}</div>\n        </div>\n    )\n}\n\ntype LinkRowProps = {\n    link: Link\n    team1: string\n    team2: string\n    reloadLinks: () => void\n}\n\nconst LinkRow = (props: LinkRowProps) => {\n    const styles = useStyles()\n    const [showEdit, setShowEdit] = useState(false)\n    const [showConfirm, setShowConfirm] = useState(false)\n\n    const onEdit = () => {\n        setShowEdit(true)\n    }\n\n    const onDelete = () => {\n        setShowConfirm(true)\n    }\n\n    const doDelete = async () => {\n        const org = globals.organization()\n        if (!org) {\n            toast.error(\"Account not found\")\n            return\n        }\n        await api.deleteLink(org.id, props.link)\n        setShowConfirm(false)\n        props.reloadLinks()\n    }\n\n    const n1 = props.link.node1\n    const n2 = props.link.node2\n\n    const firstPart = (\n        <>\n            <TableCell>\n                <RenderTeam teamID={props.team1} name={n1.teamName} channelUrl={n1.url} />\n            </TableCell>\n            <TableCell>\n                <RenderLinkedChannel teamID={props.team1} channelID={n1.channel} name={n1.channelName} url={n1.url} />\n            </TableCell>\n            <TableCell>\n                <div className={styles.lanCode}>{n1.translate}</div>\n            </TableCell>\n            <TableCell>\n                <DirectionIcon item={props.link} />\n            </TableCell>\n        </>\n    )\n\n    const secondPart = (\n        <>\n            <TableCell>\n                <RenderTeam teamID={props.team2} name={n2.teamName} channelUrl={n2.url} />\n            </TableCell>\n            <TableCell>\n                <RenderLinkedChannel teamID={props.team2} channelID={n2.channel} name={n2.channelName} url={n2.url} />\n            </TableCell>\n            <TableCell>\n                <div className={styles.lanCode}>{n2.translate}</div>\n            </TableCell>\n            <TableCell>\n                <HBox gap=\"10px\" centerItems>\n                    <div className={styles.icon} onClick={onEdit}>\n                        <Icon icon=\"edit-pen\" size={18} />\n                    </div>\n                    <div className={styles.icon} onClick={onDelete}>\n                        <Icon icon=\"deleteapp\" size={18} />\n                    </div>\n                </HBox>\n                {showEdit && (\n                    <EditLink\n                        caption=\"Edit Link\"\n                        mode=\"edit\"\n                        {...props}\n                        dismiss={() => {\n                            setShowEdit(false)\n                            props.reloadLinks()\n                        }}\n                    />\n                )}\n                {showConfirm && (\n                    <ConfirmationDialog\n                        title=\"Delete link\"\n                        message=\"Delete the channel link?\"\n                        onConfirm={() => void doDelete()}\n                        onCancel={() => setShowConfirm(false)}\n                    />\n                )}\n            </TableCell>\n        </>\n    )\n\n    if (globals.isMobile()) {\n        return (\n            <>\n                <TableRow className={styles.noBorder}>{firstPart}</TableRow>\n                <TableRow>{secondPart}</TableRow>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <TableRow>\n                {firstPart}\n                {secondPart}\n            </TableRow>\n        </>\n    )\n}\n\nexport const ChannelSettings = () => {\n    const styles = useStyles()\n    const [showInstallDialog, setShowInstallDialog] = useState(false)\n    const data = useLoaderData()\n    const [orgLinks, setOrgLinks] = useState<Protocol.Link[]>(data.orgLinks ?? [])\n    const workspaces = globals.workspaceList\n    const isMobile = globals.isMobile()\n\n    const doReloadLinks = async () => {\n        const links = await OrgLinksLoader()\n        setOrgLinks(links.orgLinks ?? [])\n    }\n\n    const reloadLinks = () => {\n        void doReloadLinks()\n    }\n\n    const linkRows = () => {\n        const rows = []\n        for (const link of orgLinks) {\n            rows.push(\n                <LinkRow\n                    key={link.node1.channel + link.node2.channel}\n                    reloadLinks={reloadLinks}\n                    link={link}\n                    team1={link.node1.team}\n                    team2={link.node2.team}\n                />\n            )\n        }\n        return rows\n    }\n\n    const installLink = () => {\n        // Open Link installation dialog\n        setShowInstallDialog(true)\n    }\n\n    const button = (\n        <CButton appearance=\"primary\" size=\"small\" onClick={installLink}>\n            New link\n        </CButton>\n    )\n\n    const rows = linkRows()\n\n    if (workspaces.length < 2) {\n        const adminURL = globals.basePath() + \"/admin/workspaces\"\n        return (\n            <TabContent headerName=\"\">\n                <div className={styles.noLinks}>\n                    You need to have at least two workspaces to use direct chats.\n                    <br />\n                    You can add another workspace in the <CLink to={adminURL}>Admin settings</CLink>.\n                </div>\n            </TabContent>\n        )\n    }\n\n    let content\n    if (rows.length === 0) {\n        content = (\n            <div className={styles.centerBox}>\n                <VBox gap=\"20px\" centerItems noExpand>\n                    <h3 className={styles.noMargin}>Get started with Conclude Link \uD83D\uDC4B</h3>\n                    <h5 className={styles.noMargin}>\n                        Currently you do not have any linked channels. Click the{\" \"}\n                        <span className={styles.subHeader}>New link</span> button to add some.\n                    </h5>\n                    <CButton appearance=\"primary\" onClick={installLink}>\n                        New link\n                    </CButton>\n                    <img src=\"/assets/images/conclude-link.webp\" style={{ maxWidth: \"90%\" }} />\n                </VBox>\n            </div>\n        )\n    } else {\n        content = (\n            <TabContent\n                headerName=\"Connect Slack and Microsoft Teams for a unified chat experience\"\n                readOnly={!globals.isOrgAdmin()}\n                button={button}>\n                <Table>\n                    <colgroup>\n                        <col />\n                        <col />\n                        <col width={50} />\n                        {!isMobile && (\n                            <>\n                                <col width={44} />\n                                <col />\n                                <col />\n                                <col width={50} />\n                            </>\n                        )}\n                        <col width={62} />\n                    </colgroup>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell className={styles.header}>Team</TableHeaderCell>\n                            <TableHeaderCell className={styles.header}>Channel</TableHeaderCell>\n                            <TableHeaderCell className={styles.header}></TableHeaderCell>\n                            <TableHeaderCell></TableHeaderCell>\n                            {!isMobile && (\n                                <>\n                                    <TableHeaderCell className={styles.header}>Team</TableHeaderCell>\n                                    <TableHeaderCell className={styles.header}>Channel</TableHeaderCell>\n                                    <TableHeaderCell className={styles.header}></TableHeaderCell>\n                                    <TableHeaderCell></TableHeaderCell>\n                                </>\n                            )}\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>{rows}</TableBody>\n                </Table>\n            </TabContent>\n        )\n    }\n\n    return (\n        <>\n            {content}\n            {showInstallDialog && (\n                <EditLink\n                    mode=\"create\"\n                    caption=\"New link\"\n                    dismiss={() => {\n                        setShowInstallDialog(false)\n                        reloadLinks()\n                    }}\n                />\n            )}\n        </>\n    )\n}\n\ntype EditLinkProps = DialogProps & {\n    mode: \"create\" | \"edit\"\n    team1?: string\n    team2?: string\n    link?: Link\n}\n\nconst EditLink = (props: EditLinkProps) => {\n    const [saving, setSaving] = React.useState(false)\n    const [team1, setTeam1] = React.useState(props.team1 ?? \"\")\n    const [team2, setTeam2] = React.useState(props.team2 ?? \"\")\n    const [channel1, setChannel1] = React.useState(props.link?.node1.channel ?? \"\")\n    const [channel2, setChannel2] = React.useState(props.link?.node2.channel ?? \"\")\n    const [tr1, setTr1] = React.useState<string | undefined>(props.link?.node1.translate)\n    const [tr2, setTr2] = React.useState<string | undefined>(props.link?.node2.translate)\n    const edit = props.mode === \"edit\"\n\n    const save = async () => {\n        const org = globals.organization()\n        if (!org) {\n            toast.error(\"Account not found\")\n            return\n        }\n        setSaving(true)\n        const data = {\n            node1: { team: \"\", channel: channel1, translate: tr1, owner: globals.userID() },\n            node2: { team: \"\", channel: channel2, translate: tr2, owner: globals.userID() },\n            direction: Protocol.Direction.Bidirectional,\n        }\n        if (edit) {\n            try {\n                await Api.updateLink(org.id, data)\n                toast.success(\"Updated channel link\")\n            } catch (e) {\n                toast.error(\"Failed to update link\" + e)\n            }\n        } else {\n            try {\n                await Api.createLink(org.id, data)\n                toast.success(\"Created channel link\")\n            } catch (e) {\n                toast.error(\"Failed to create link\" + e)\n            }\n        }\n        setSaving(false)\n        props.dismiss()\n    }\n\n    const onCreate = () => {\n        void save()\n    }\n\n    throw new Error(\"XXXX\")\n\n    const valid = channel1 !== \"\" && channel2 !== \"\"\n\n    const footer = (\n        <ButtonRow>\n            <CButton appearance=\"primary\" onClick={onCreate} disabled={!valid}>\n                {edit ? \"Save\" : \"Create\"}\n            </CButton>\n        </ButtonRow>\n    )\n\n    return (\n        <Dialog {...props} footer={footer}>\n            <HBox gap=\"16px\">\n                <VBox gap=\"16px\">\n                    <TeamSelect\n                        teamList={globals.teamList}\n                        initialTeam={team1}\n                        onChange={(teamID) => {\n                            setTeam1(teamID)\n                            setChannel1(\"\")\n                        }}\n                        readOnly={edit}\n                    />\n                    <ChannelSelect\n                        teamID={team1}\n                        selectedChannel={channel1}\n                        onChannelSelected={setChannel1}\n                        readOnly={edit}\n                    />\n                    <LanguageSelect value={tr1} onChange={setTr1} />\n                </VBox>\n                <Icon icon=\"sidebar-link\" size={46} color={theme.colors.green} />\n                <VBox gap=\"16px\">\n                    <TeamSelect\n                        teamList={globals.teamList}\n                        initialTeam={team2}\n                        onChange={(teamID) => {\n                            setTeam2(teamID)\n                            setChannel2(\"\")\n                        }}\n                        readOnly={edit}\n                    />\n                    <ChannelSelect\n                        teamID={team2}\n                        selectedChannel={channel2}\n                        onChannelSelected={setChannel2}\n                        readOnly={edit}\n                    />\n                    <LanguageSelect value={tr2} onChange={setTr2} />\n                </VBox>\n            </HBox>\n            {saving && <LoadingSpinner text={\"\"} />}\n        </Dialog>\n    )\n}\n", "import { CButton } from \"@conclude/components/concludeui\"\nimport { CLink } from \"@conclude/components/concludeui/CLink\"\nimport { CSelectOption } from \"@conclude/components/concludeui/CSelect\"\nimport { ExpandingSpacer, VBox } from \"@conclude/components/shared/BoxLayout\"\nimport { ButtonRow } from \"@conclude/components/shared/ButtonRow\"\nimport { Dialog, DialogProps } from \"@conclude/components/shared/Dialog\"\nimport { Icon } from \"@conclude/components/shared/Icon\"\nimport { InputElement } from \"@conclude/components/shared/InputElement\"\nimport { LoadingSpinner } from \"@conclude/components/shared/LoadingSpinner\"\nimport { ScrollView } from \"@conclude/components/shared/ScrollView\"\nimport { SelectItem } from \"@conclude/components/shared/SelectItem\"\nimport { TabContent } from \"@conclude/components/shared/TabContent\"\nimport { toast } from \"@conclude/components/shared/Toast\"\nimport { default as Api, default as api } from \"@conclude/core/Api\"\nimport globals from \"@conclude/core/Globals\"\nimport { Protocol } from \"@conclude/core/Protocol\"\nimport { useLoaderData, useNavigate, useSearch } from \"@conclude/routing/RouteDefs\"\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHeader,\n    TableHeaderCell,\n    TableRow,\n    makeStyles,\n} from \"@fluentui/react-components\"\nimport { ChevronRightFilled } from \"@fluentui/react-icons\"\nimport { RenderLinkedChannel } from \"modules/link/link/ChannelSettings\"\nimport React from \"react\"\nimport { theme } from \"theme\"\n\nconst useStyles = makeStyles({\n    grid: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr 1fr 1fr 30px\",\n        gridAutoRows: \"min-content\",\n        gap: \"10px\",\n        alignItems: \"center\",\n        fontSize: \"14px\",\n        width: \"100%\",\n    },\n    gridSeparator: {\n        borderTopWidth: \"1px\",\n        borderTopStyle: \"solid\",\n        borderTopColor: theme.colors.grayLight2,\n        gridColumn: \"1 / span 5\",\n    },\n    header: {\n        fontWeight: \"700\",\n    },\n\n    noLinks: {\n        textAlign: \"center\",\n        fontSize: \"1.3rem\",\n        lineHeight: \"1.5\",\n    },\n    memberItems: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        gap: \"10px\",\n    },\n    memberItem: {\n        padding: \"5px\",\n        backgroundColor: theme.colors.grayLight2,\n        borderRadius: \"5px\",\n    },\n    editIcon: {\n        color: theme.colors.green,\n        padding: \"5px\",\n        width: \"30px\",\n        cursor: \"pointer\",\n        \":hover\": {\n            color: theme.colors.grayMedium2,\n        },\n    },\n})\n\nexport const ChatLoader = async () => {\n    const org = globals.organization()\n    if (org) {\n        const chats = await api.listChats(org.id)\n        const userCompletions = await api.loadOrgCompletions()\n        // console.log(\"###DEBUG: ChatsLoader\", org.id, chats)\n        return { chats, userCompletions }\n    }\n    return {}\n}\n\nfunction mapUser(user: Protocol.UserAutoCompletion): CSelectOption {\n    return {\n        name: `@${user.mention}`,\n        value: user.id,\n        label: `@${user.mention}`,\n    }\n}\n\nexport const ChatSettings = () => {\n    const styles = useStyles()\n    const loaderData = useLoaderData()\n    const [chats, setChats] = React.useState<Protocol.Chat[]>(loaderData.chats ?? [])\n    const workspaces = globals.workspaceList\n    const search = useSearch()\n    const navigate = useNavigate()\n\n    const showCreateDialog = search.channel === \"new\"\n    const chatToEdit = chats.find((chat) => chat.channels[0].id === search.channel)\n\n    const closeDialog = () => {\n        void closeDialogAsync()\n    }\n\n    const closeDialogAsync = async () => {\n        await update()\n        history.back()\n    }\n\n    const newChat = () => {\n        void navigate({ search: { channel: \"new\" } })\n    }\n\n    const update = async () => {\n        const chats = await ChatLoader()\n        setChats(chats.chats ?? [])\n    }\n\n    if (workspaces.length < 2) {\n        const adminURL = globals.basePath() + \"/admin/workspaces\"\n        return (\n            <TabContent headerName=\"Direct chats\">\n                <div className={styles.noLinks}>\n                    You need to have at least two workspaces to use direct chats.\n                    <br />\n                    You can add another workspace in the <CLink to={adminURL}>Admin settings</CLink>.\n                </div>\n            </TabContent>\n        )\n    }\n\n    const createButton = (\n        <CButton appearance=\"primary\" onClick={newChat} size=\"small\">\n            Create New Chat\n        </CButton>\n    )\n    return (\n        <TabContent\n            headerName=\"Chat directly with collaborators on Microsoft Teams or Slack\"\n            readOnly={!globals.isOrgAdmin()}\n            button={createButton}>\n            <ChatTable chats={chats} update={update} />\n            <ExpandingSpacer />\n            {showCreateDialog && <CreateChat caption=\"Create new direct chat\" dismiss={closeDialog} />}\n            {chatToEdit && <EditChat {...chatToEdit} dismiss={closeDialog} />}\n        </TabContent>\n    )\n}\n\nconst CreateChat = (props: DialogProps) => {\n    const [channelName, setChannelName] = React.useState(\"\")\n    const [topic, setTopic] = React.useState(\"\")\n    let userCompletions: Protocol.UserAutoCompletion[] = []\n    const loaderData = useLoaderData()\n    const [members, setMembers] = React.useState<CSelectOption[]>([])\n    const [saving, setSaving] = React.useState(false)\n\n    const onInputChange = (id: string, value: string) => {\n        switch (id) {\n            case \"channelName\":\n                setChannelName(value)\n                break\n            case \"topic\":\n                setTopic(value)\n                break\n        }\n    }\n\n    const onMembersChange = (options: CSelectOption[]) => {\n        setMembers(options)\n    }\n\n    userCompletions = loaderData.userCompletions ? loaderData.userCompletions : []\n\n    const allUsers = userCompletions.map(mapUser)\n\n    const save = async () => {\n        const org = globals.organization()\n        if (!org) {\n            toast.error(\"Account not found\")\n            return\n        }\n        setSaving(true)\n        const memberList = members.map((member) => member.value)\n        try {\n            await Api.createChat(org.id, {\n                channelName,\n                topic: topic.trim(),\n                members: memberList,\n            })\n            toast.success(\"Created direct chat\")\n            setChannelName(\"\")\n            setTopic(\"\")\n            setMembers([])\n        } catch (e) {\n            toast.error(\"Failed to create direct chat\" + e)\n        }\n        setSaving(false)\n        props.dismiss()\n    }\n\n    const onCreate = () => {\n        console.log(\"Create direct chat\")\n        void save()\n    }\n\n    const valid = channelName.length > 0 && members.length > 0\n\n    const footer = (\n        <ButtonRow paddingRight=\"15px\">\n            <CButton appearance=\"primary\" onClick={onCreate} disabled={!valid}>\n                Create\n            </CButton>\n        </ButtonRow>\n    )\n\n    return (\n        <Dialog {...props} caption=\"Create new chat\" footer={footer}>\n            <VBox gap=\"16px\">\n                <ScrollView fullHeight>\n                    <VBox align=\"start\" gap=\"16px\">\n                        <SelectItem\n                            id=\"chat-members\"\n                            label=\"Chat members\"\n                            options={allUsers}\n                            selectedOptions={members}\n                            placeholder=\"Select chat members\"\n                            onChange={onMembersChange}\n                            multiSelect\n                            required\n                        />\n                        <InputElement id=\"topic\" labelText={\"Topic\"} onInputChange={onInputChange} />\n                        <InputElement\n                            id=\"channelName\"\n                            required\n                            labelText={\"Channel name\"}\n                            onInputChange={onInputChange}\n                            noWhiteSpace\n                        />\n                    </VBox>\n                </ScrollView>\n            </VBox>\n            {saving && <LoadingSpinner text=\"Saving...\" />}\n        </Dialog>\n    )\n}\n\nfunction mapMembers(members: Protocol.GlobalUser[]): CSelectOption[] {\n    return members.map((member) => {\n        return {\n            name: `@${member.mention}`,\n            value: member.id,\n            label: `@${member.mention}`,\n        }\n    })\n}\n\nconst renderChannel = (channel: Protocol.Channel | undefined) => {\n    if (!channel) {\n        return <div>&mdash;</div>\n    }\n    return <RenderLinkedChannel teamID={channel.teamID} channelID={channel.id} name={channel.name} url={channel.url} />\n}\n\ntype EditChatProps = DialogProps & Protocol.Chat\n\nconst EditChat = (props: EditChatProps) => {\n    const [topic, setTopic] = React.useState(props.topic)\n    let userCompletions: Protocol.UserAutoCompletion[] = []\n    const loaderData = useLoaderData()\n    const [members, setMembers] = React.useState<CSelectOption[]>(mapMembers(props.members))\n    const [saving, setSaving] = React.useState(false)\n\n    const onInputChange = (id: string, value: string) => {\n        switch (id) {\n            case \"topic\":\n                setTopic(value)\n                break\n        }\n    }\n\n    const onMembersChange = (options: CSelectOption[]) => {\n        setMembers(options)\n    }\n\n    userCompletions = loaderData.userCompletions ? loaderData.userCompletions : []\n\n    const allUsers = userCompletions.map(mapUser)\n\n    const save = async () => {\n        const org = globals.organization()\n        if (!org) {\n            toast.error(\"Account not found\")\n            return\n        }\n        setSaving(true)\n        const memberList = members.map((member) => member.value)\n        const channels = props.channels.map((channel) => channel.id)\n        try {\n            await Api.updateChat(org.id, {\n                channels,\n                topic: topic.trim(),\n                members: memberList,\n            })\n            toast.success(\"Direct chat edited\")\n            setTopic(\"\")\n            setMembers([])\n        } catch (e) {\n            toast.error(\"Failed to edit direct chat\" + e)\n        }\n        setSaving(false)\n        props.dismiss()\n    }\n\n    const onSave = () => {\n        console.log(\"Edit direct chat\")\n        void save()\n    }\n\n    const valid = members.length > 0\n\n    const footer = (\n        <ButtonRow paddingRight=\"15px\">\n            <CButton appearance=\"primary\" onClick={onSave} disabled={!valid}>\n                Save\n            </CButton>\n        </ButtonRow>\n    )\n\n    let slackChannel, teamsChannel\n    for (const channel of props.channels) {\n        const teamID = channel.teamID\n        const team = globals.getTeamForID(teamID)\n        if (!team) {\n            continue\n        }\n        if (team.isSlackTeam()) {\n            slackChannel = channel\n        } else if (team.isTeamsTeam()) {\n            teamsChannel = channel\n        }\n    }\n\n    return (\n        <Dialog {...props} caption=\"Edit chat\" footer={footer}>\n            <VBox gap=\"16px\">\n                <ScrollView fullHeight>\n                    <VBox align=\"start\" gap=\"16px\">\n                        <InputElement id=\"topic\" labelText={\"Topic\"} onInputChange={onInputChange} value={topic} />\n                        <SelectItem\n                            id=\"chat-members\"\n                            label=\"Chat members\"\n                            options={allUsers}\n                            selectedOptions={members}\n                            placeholder=\"Select chat members\"\n                            onChange={onMembersChange}\n                            multiSelect\n                            required\n                        />\n                        {globals.isMobile() && (\n                            <>\n                                <div>{renderChannel(slackChannel)}</div>\n                                <div>{renderChannel(teamsChannel)}</div>\n                            </>\n                        )}\n                    </VBox>\n                </ScrollView>\n            </VBox>\n            {saving && <LoadingSpinner text=\"Saving...\" />}\n        </Dialog>\n    )\n}\n\nconst ChatRow = (props: Protocol.Chat & { update: () => Promise<void> }) => {\n    const styles = useStyles()\n    const navigate = useNavigate()\n    const mobile = globals.isMobile()\n\n    const members = props.members.map((member) => {\n        return (\n            <div className={styles.memberItem} key={member.id}>\n                @{member.mention}\n            </div>\n        )\n    })\n\n    const showEditDialog = () => {\n        console.log(\"Show edit dialog\", props.channels[0].id)\n        void navigate({ search: { channel: props.channels[0].id } })\n    }\n\n    let slackChannel, teamsChannel\n    for (const channel of props.channels) {\n        const teamID = channel.teamID\n        const team = globals.getTeamForID(teamID)\n        if (!team) {\n            continue\n        }\n        if (team.isSlackTeam()) {\n            slackChannel = channel\n        } else if (team.isTeamsTeam()) {\n            teamsChannel = channel\n        }\n    }\n\n    if (mobile) {\n        return (\n            <TableRow onClick={showEditDialog}>\n                <TableCell>{props.topic}</TableCell>\n                <TableCell>\n                    <div className={styles.editIcon}>\n                        <ChevronRightFilled />\n                    </div>\n                </TableCell>\n            </TableRow>\n        )\n    }\n\n    return (\n        <TableRow>\n            <TableCell>{props.topic}</TableCell>\n            <TableCell>{renderChannel(slackChannel)}</TableCell>\n            <TableCell>{renderChannel(teamsChannel)}</TableCell>\n            <TableCell>\n                <div className={styles.memberItems}>{members}</div>\n            </TableCell>\n            <TableCell>\n                <div className={styles.editIcon} onClick={showEditDialog}>\n                    <Icon icon=\"edit-pen\" size={24} />\n                </div>\n            </TableCell>\n        </TableRow>\n    )\n}\n\nfunction ChatTable(props: { chats: Protocol.Chat[]; update: () => Promise<void> }) {\n    const styles = useStyles()\n    const mobile = globals.isMobile()\n\n    const linkRows = () => {\n        const rows = []\n        for (const chat of props.chats) {\n            // Create a unique row key\n            const key = chat.channels.map((channel) => channel.id).join(\",\")\n            rows.push(<ChatRow key={key} {...chat} update={props.update} />)\n        }\n        return rows\n    }\n\n    const rows = linkRows()\n\n    if (rows.length === 0) {\n        return (\n            <>\n                <div className={styles.noLinks}>\n                    You currently do not have any direct chats.\n                    <br />\n                    Press the <b>Create New Chat</b> button to create a new direct chat.\n                </div>\n            </>\n        )\n    }\n\n    if (mobile) {\n        return (\n            <>\n                <Table>\n                    <colgroup>\n                        <col />\n                        <col width=\"40\" />\n                    </colgroup>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell className={styles.header}>Topic</TableHeaderCell>\n                            <TableHeaderCell></TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>{linkRows()}</TableBody>\n                </Table>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <Table>\n                <colgroup>\n                    <col />\n                    <col />\n                    <col />\n                    <col />\n                    <col width=\"40\" />\n                </colgroup>\n                <TableHeader>\n                    <TableRow>\n                        <TableHeaderCell className={styles.header}>Topic</TableHeaderCell>\n                        <TableHeaderCell className={styles.header}>Channel in Slack</TableHeaderCell>\n                        <TableHeaderCell className={styles.header}>Chat in Teams</TableHeaderCell>\n                        <TableHeaderCell className={styles.header}>Members</TableHeaderCell>\n                        <TableHeaderCell></TableHeaderCell>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>{linkRows()}</TableBody>\n            </Table>\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["React", "import_react", "useStyles", "React", "rows", "import_react", "useStyles", "React", "chats", "rows"]
}
